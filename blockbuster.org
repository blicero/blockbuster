# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2021-08-12 17:26:44 krylon>
#
#+TAGS: go(g) internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p)
#+PRIORITIES: A G D


Blockbuster is an application to keep track of a collection of video files.
If you're like me, you own a DVD collection that is not to be frowned upon,
but these days, none of your computers have an optical drive any more, because
this isn't 2006. So you got an external DVD drive or whatever and ripped them
to hard disk, NAS, or whatever, and now you want to keep track track of what's
what.

Welcome to blockbuster. I want blockbuster to keep track of a collection of
video files, possibly spread across several folders, disks, or servers, series
and movies, and I want to edit metadata, annotate files with actors/actresses,
directors, genres, years, links to IMDB, Wikipedia, etc.

I already wrote one such application in Ruby many years ago, but these days I
feel more comfortable with Go, and now that I discovered Go can do GUI
applications as well, I am good to go. So let's do this!

* Blockbuster
** Clocktable
   Org-mode, if you're not familiar, is like a note-taking application on LSD,
   caffeine, and OCD. Among other things, this means, I get to keep track of
   the time I am spending on the (soon-to-be) various parts of the
   application, and have emacs render me a nice table to see how I wasted my
   time. Behold:
#+BEGIN: clocktable :scope file :maxlevel 202 :emphasize t
#+CAPTION: Clock summary at [2021-08-12 Do 17:26]
| Headline             | Time      |         |       |      |      |
|----------------------+-----------+---------+-------+------+------|
| *Total time*         | *1d 9:18* |         |       |      |      |
|----------------------+-----------+---------+-------+------+------|
| *Blockbuster*        | *1d 9:18* |         |       |      |      |
| \_  /Backend/        |           | /14:55/ |       |      |      |
| \_    Database       |           |         | 13:01 |      |      |
| \_      Tags         |           |         |       | 1:31 |      |
| \_      Schema       |           |         |       | 1:18 |      |
| \_        Folders    |           |         |       |      | 1:18 |
| \_    Scanner        |           |         |  1:54 |      |      |
| \_      Folders      |           |         |       | 1:54 |      |
| \_  /GUI/            |           | /18:23/ |       |      |      |
| \_    Folders        |           |         |  0:25 |      |      |
| \_    Files [1/3]    |           |         |  4:26 |      |      |
| \_      Tagging      |           |         |       | 4:26 |      |
| \_    Dialog         |           |         |  0:27 |      |      |
| \_    Menu           |           |         |  5:57 |      |      |
| \_    Initialization |           |         |  1:45 |      |      |
#+END:
** Backend
*** Database
    :LOGBOOK:
    CLOCK: [2021-08-11 Mi 18:12]--[2021-08-11 Mi 18:36] =>  0:24
    CLOCK: [2021-08-11 Mi 16:59]--[2021-08-11 Mi 17:32] =>  0:33
    CLOCK: [2021-08-10 Di 18:24]--[2021-08-10 Di 19:54] =>  1:30
    CLOCK: [2021-08-09 Mo 22:42]--[2021-08-09 Mo 23:21] =>  0:39
    CLOCK: [2021-08-05 Do 18:13]--[2021-08-05 Do 21:41] =>  3:28
    CLOCK: [2021-08-05 Do 14:14]--[2021-08-05 Do 14:41] =>  0:27
    CLOCK: [2021-08-05 Do 09:40]--[2021-08-05 Do 11:14] =>  1:34
    CLOCK: [2021-08-04 Mi 11:25]--[2021-08-04 Mi 12:11] =>  0:46
    CLOCK: [2021-08-03 Di 20:24]--[2021-08-03 Di 21:15] =>  0:51
    :END:
    SQLite it is, then.
**** Tags
     :LOGBOOK:
     CLOCK: [2021-08-10 Di 00:10]--[2021-08-10 Di 01:41] =>  1:31
     :END:
**** Schema
     I am kind of looking at my old Ruby video library app, and I am looking
     for things I want to keep, and things I want to do differently.
***** DONE Folders
      CLOSED: [2021-08-07 Sa 19:23]
      :LOGBOOK:
      CLOCK: [2021-08-07 Sa 18:05]--[2021-08-07 Sa 19:23] =>  1:18
      :END:
      Ah, in order to keep track of files being deleted or added, I need to
      keep track of what folders I have scanned.
*** Scanner
    I want to be able to keep track of multiple root directories containing
    video files, movies as well as series.
**** DONE Folders
     CLOSED: [2021-08-07 Sa 21:55]
     :LOGBOOK:
     CLOCK: [2021-08-07 Sa 21:05]--[2021-08-07 Sa 21:55] =>  0:50
     CLOCK: [2021-08-07 Sa 19:48]--[2021-08-07 Sa 20:52] =>  1:04
     :END:
     I'm going to have to rethink how the Scanner is supposed to work if I'm
     going to have Folders as objects in their own right in the database.
     Not quite sure, yet, but I think I was a little over-ambitious with my
     first design.
** GUI
   :LOGBOOK:
   CLOCK: [2021-08-09 Mo 22:42]--[2021-08-09 Mo 22:42] =>  0:00
   CLOCK: [2021-08-07 Sa 22:10]--[2021-08-08 So 01:27] =>  3:17
   CLOCK: [2021-08-06 Fr 18:34]--[2021-08-06 Fr 18:36] =>  0:02
   CLOCK: [2021-08-05 Do 21:48]--[2021-08-05 Do 23:52] =>  2:04
   :END:
*** DONE Folders
    CLOSED: [2021-08-09 Mo 20:53]
    :LOGBOOK:
    CLOCK: [2021-08-07 Sa 19:23]--[2021-08-07 Sa 19:48] =>  0:25
    :END:
*** Files [1/3]
**** DONE Tagging
     CLOSED: [2021-08-12 Do 17:26]
     :LOGBOOK:
     CLOCK: [2021-08-12 Do 16:53]--[2021-08-12 Do 17:26] =>  0:33
     CLOCK: [2021-08-12 Do 00:14]--[2021-08-12 Do 01:11] =>  0:57
     CLOCK: [2021-08-11 Mi 22:58]--[2021-08-11 Mi 23:22] =>  0:24
     CLOCK: [2021-08-11 Mi 21:55]--[2021-08-11 Mi 22:26] =>  0:31
     CLOCK: [2021-08-11 Mi 19:38]--[2021-08-11 Mi 20:59] =>  1:21
     CLOCK: [2021-08-11 Mi 18:46]--[2021-08-11 Mi 18:47] =>  0:01
     CLOCK: [2021-08-11 Mi 18:36]--[2021-08-11 Mi 18:37] =>  0:01
     CLOCK: [2021-08-11 Mi 17:34]--[2021-08-11 Mi 18:12] =>  0:38
     :END:
**** TODO Actors
**** TODO Editing Metadata
*** DONE Dialog
    CLOSED: [2021-08-09 Mo 20:53]
    :LOGBOOK:
    CLOCK: [2021-08-09 Mo 20:25]--[2021-08-09 Mo 20:52] =>  0:27
    :END:
    This is all so very tedious.
*** DONE Menu
    CLOSED: [2021-08-11 Mi 17:33]
    :LOGBOOK:
    CLOCK: [2021-08-09 Mo 17:20]--[2021-08-09 Mo 19:53] =>  2:33
    CLOCK: [2021-08-09 Mo 17:12]--[2021-08-09 Mo 17:18] =>  0:06
    CLOCK: [2021-08-06 Fr 20:30]--[2021-08-06 Fr 23:48] =>  3:18
    :END:
    As I _slowly_ recover my memories of Gtk2's way of doing menus, and try to
    tranfer those recovered, hazy memories to Gtk3, I begin to realize that
    setting up the menu bar is quite likely every bit as tedious as setting up
    the TreeView instances, so maybe I should handle them in a similar manner.
**** Random Ramblings
     I want a menu. That shouldn't be too hard, but I feel that GUI programming
     in Go is rather tedious.
     Maybe it is a quality of GUI programming with statically typed languages
     in general? Or OOP vs Non-OOP? Gtk2 in Ruby and to a slightly lesser
     degree in Python2 felt very natural, whereas, say Swing in Java, as well
     as this, feels a little forced.
     Maybe I am just being whiney.
     I mean, I could just use Ruby, my old video store application still works
     on Debian, but with Ruby - and scripting languages in general - I have
     learned that moving your application from one OS/distro/version to another
     becomes extremely tedious at best, because of the dependencies. I am
     beginning to understand that that is the problem that drove people to
     containers, and maybe that means I should learn about them.
     Anyway, the promise of Go, of course, is that by linking statically, your
     output is one binary, a *really* large binary, but that really large
     binary includes /everything/, from the Go runtime to all your dependencies
     and /their/ dependencies and so forth.
     So once you got a binary, you can just drop that on any compatible system,
     and it should "just work".
     And Go's model lends itself to more easily reproducible build
     environments.
     ...
     The point is, is all this tedium the inevitable price of improved
     portability across effectively Linux distros and BSDs?
     ....
     Another thing is that I feel a mismatch between Go's type system and
     Gtk's. Gtk in C is already pretty weird. I have never used it from C++,
     because I am not a C++ lover (although I did a little GUI programming
     with C++ and Qt4, and that was quite nice), but like I said, with Python
     and Ruby, both object-oriented languages, Gtk's type hierarchy naturally
     translated into class hierarchies and allowed for interesting things,
     especially subclassing existing widget classes.
     In Go, this doesn't work, because there is no inheritance.
*** DONE Initialization
    CLOSED: [2021-08-06 Fr 20:22]
    :LOGBOOK:
    CLOCK: [2021-08-06 Fr 18:36]--[2021-08-06 Fr 20:21] =>  1:45
    :END:
    The initialization of the various TreeViews and their associated
    TreeStores/ListStores is /really/ tedious, and if I want to ever change or
    extend this (which I almost certainly will), I need to find a way to make
    the whole process more ... data-driven, less reptetitive.
