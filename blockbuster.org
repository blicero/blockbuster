# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2021-08-26 22:17:53 krylon>
#
#+TAGS: go(g) internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p)
#+PRIORITIES: A G D


Blockbuster is an application to keep track of a collection of video files.
If you're like me, you own a DVD collection that is not to be frowned upon,
but these days, none of your computers have an optical drive any more, because
this isn't 2006. So you got an external DVD drive or whatever and ripped them
to hard disk, NAS, or whatever, and now you want to keep track track of what's
what.

Welcome to blockbuster. I want blockbuster to keep track of a collection of
video files, possibly spread across several folders, disks, or servers, series
and movies, and I want to edit metadata, annotate files with actors/actresses,
directors, genres, years, links to IMDB, Wikipedia, etc.

I already wrote one such application in Ruby many years ago, but these days I
feel more comfortable with Go, and now that I discovered Go can do GUI
applications as well, I am good to go. So let's do this!

* Blockbuster
** Clocktable
   Org-mode, if you're not familiar, is like a note-taking application on LSD,
   caffeine, and OCD. Among other things, this means, I get to keep track of
   the time I am spending on the (soon-to-be) various parts of the
   application, and have emacs render me a nice table to see how I wasted my
   time. Behold:
#+BEGIN: clocktable :scope file :maxlevel 202 :emphasize t
#+CAPTION: Clock summary at [2021-08-23 Mo 23:01]
| Headline                  | Time       |            |       |      |      |
|---------------------------+------------+------------+-------+------+------|
| *Total time*              | *2d 19:43* |            |       |      |      |
|---------------------------+------------+------------+-------+------+------|
| *Blockbuster*             | *2d 19:43* |            |       |      |      |
| \_  /Backend/             |            | /19:38/    |       |      |      |
| \_    Database [1/2]      |            |            | 17:44 |      |      |
| \_      Tags              |            |            |       | 1:31 |      |
| \_      Person            |            |            |       | 1:29 |      |
| \_      Schema            |            |            |       | 1:18 |      |
| \_        Folders         |            |            |       |      | 1:18 |
| \_      URLs              |            |            |       | 3:14 |      |
| \_    Scanner             |            |            |  1:54 |      |      |
| \_      Folders           |            |            |       | 1:54 |      |
| \_  /GUI/                 |            | /1d 19:43/ |       |      |      |
| \_    Search              |            |            |  8:11 |      |      |
| \_    Context menus       |            |            |  1:04 |      |      |
| \_    Folders             |            |            |  0:25 |      |      |
| \_    Files [4/5]         |            |            | 19:25 |      |      |
| \_      Play Files        |            |            |       | 0:33 |      |
| \_      Display file size |            |            |       | 0:57 |      |
| \_      Tagging           |            |            |       | 5:11 |      |
| \_      Person            |            |            |       | 7:50 |      |
| \_      Editing Metadata  |            |            |       | 4:54 |      |
| \_    Dialog              |            |            |  0:27 |      |      |
| \_    Menu                |            |            |  5:57 |      |      |
| \_    Initialization      |            |            |  1:45 |      |      |
| \_  /Bugs/                |            | /4:22/     |       |      |      |
| \_    UI freezes          |            |            |  4:22 |      |      |
#+END:
** Thoughts that keep me up at night
*** Performance
    It's not like I'm super obsessed with performance. In fact, I am quite
    patient when it comes to the performance of a computer or a piece of
    software.
    That doesn't mean I do not care about performance at all, though. After
    all, it's a matter of, let's say /pride/.
    But I have learned, both the easy way /and/ the hard way, that performance
    optimization is one of the few things in life you really are better off
    procrastinating like a champ.
    So I am leaving all kinds of potential optimizations on the table for
    now. Maybe, one day, if the pressure gets too much, I will revisit them
    and make this things slick like a greased piglet on espresso.
    For now, I'll just use this node to gather notes on where I, naively,
    think some optimization might make a difference.
** Backend
*** Database [1/2]
    :LOGBOOK:
    CLOCK: [2021-08-11 Mi 18:12]--[2021-08-11 Mi 18:36] =>  0:24
    CLOCK: [2021-08-11 Mi 16:59]--[2021-08-11 Mi 17:32] =>  0:33
    CLOCK: [2021-08-10 Di 18:24]--[2021-08-10 Di 19:54] =>  1:30
    CLOCK: [2021-08-09 Mo 22:42]--[2021-08-09 Mo 23:21] =>  0:39
    CLOCK: [2021-08-05 Do 18:13]--[2021-08-05 Do 21:41] =>  3:28
    CLOCK: [2021-08-05 Do 14:14]--[2021-08-05 Do 14:41] =>  0:27
    CLOCK: [2021-08-05 Do 09:40]--[2021-08-05 Do 11:14] =>  1:34
    CLOCK: [2021-08-04 Mi 11:25]--[2021-08-04 Mi 12:11] =>  0:46
    CLOCK: [2021-08-03 Di 20:24]--[2021-08-03 Di 21:15] =>  0:51
    :END:
    SQLite it is, then.
**** Tags
     :LOGBOOK:
     CLOCK: [2021-08-10 Di 00:10]--[2021-08-10 Di 01:41] =>  1:31
     :END:
**** DONE Person
     CLOSED: [2021-08-13 Fr 20:46]
     :LOGBOOK:
     CLOCK: [2021-08-12 Do 17:41]--[2021-08-12 Do 19:10] =>  1:29
     :END:
**** Schema
     I am kind of looking at my old Ruby video library app, and I am looking
     for things I want to keep, and things I want to do differently.
***** DONE Folders
      CLOSED: [2021-08-07 Sa 19:23]
      :LOGBOOK:
      CLOCK: [2021-08-07 Sa 18:05]--[2021-08-07 Sa 19:23] =>  1:18
      :END:
      Ah, in order to keep track of files being deleted or added, I need to
      keep track of what folders I have scanned.
**** TODO URLs
     :LOGBOOK:
     CLOCK: [2021-08-14 Sa 19:46]--[2021-08-14 Sa 23:00] =>  3:14
     :END:
     I want to be able to attach URLs to People and Files, e.g. links to IMDB,
     Wikipedia or a fandom wiki.
*** Scanner
    I want to be able to keep track of multiple root directories containing
    video files, movies as well as series.
**** DONE Folders
     CLOSED: [2021-08-07 Sa 21:55]
     :LOGBOOK:
     CLOCK: [2021-08-07 Sa 21:05]--[2021-08-07 Sa 21:55] =>  0:50
     CLOCK: [2021-08-07 Sa 19:48]--[2021-08-07 Sa 20:52] =>  1:04
     :END:
     I'm going to have to rethink how the Scanner is supposed to work if I'm
     going to have Folders as objects in their own right in the database.
     Not quite sure, yet, but I think I was a little over-ambitious with my
     first design.
** GUI                                                                   :ui:
   :LOGBOOK:
   CLOCK: [2021-08-19 Do 02:02]--[2021-08-19 Do 03:08] =>  1:06
   CLOCK: [2021-08-09 Mo 22:42]--[2021-08-09 Mo 22:42] =>  0:00
   CLOCK: [2021-08-07 Sa 22:10]--[2021-08-08 So 01:27] =>  3:17
   CLOCK: [2021-08-06 Fr 18:34]--[2021-08-06 Fr 18:36] =>  0:02
   CLOCK: [2021-08-05 Do 21:48]--[2021-08-05 Do 23:52] =>  2:04
   :END:
*** Need closure?                                                :meditation:
    I use closures a lot for creating handler functions for events, e.g. as I
    build a popup menu when the user clicks on some item.
    The first version of this application I wrote was in Ruby, where using
    closures/blocks is easy, feels natural, and is aesthetically pleasing.
    I Go, using closures this way feels less aesthetically pleasing. I mean,
    it's not an eye sore, but it doesn't feel natural in the way it did with
    Ruby. Damn, I miss Ruby.

    Anyway, what I am trying to say is that I suspect there /probably/ is a
    more idiomatic way to deal with this in Go. The existing solution is not
    /bad/ by any means, so the pressure to "fix" this is very low. And so far
    the alternative I managed to come up with were less aesthetically pleasing
    and more verbose.

    So this is not a problem, I think, but I have this nagging feeling in the
    back of my head that there is a more elegant solution to all these dynamic
    callbacks, but the combination of Go and Gtk's API makes that non-trivial.
*** Got class?                                                   :meditation:
    I dabbled quite a bit with Gtk2 in Python. One aspect I loved about
    Python's Gtk2 interface to such a degree I tended to prefer it over Ruby
    just for this feature, was that one could create custom TreeModel classes
    in Python. That made a lot of problems disappear at once.
    In Go, I am afraid that will not work. It's not even about Go not being
    object-oriented, Ruby's Gtk2-bindings did not allow for custom model
    classes, either, as far as I can recall.
    Without custom models, this gets *very* tedious, which is one of the
    things I seriously dislike about GUI development.
*** TODO Search                                                     :feature:
    :LOGBOOK:
    CLOCK: [2021-08-21 Sa 19:50]--[2021-08-21 Sa 20:29] =>  0:39
    CLOCK: [2021-08-20 Fr 23:50]--[2021-08-21 Sa 02:00] =>  2:10
    CLOCK: [2021-08-20 Fr 21:51]--[2021-08-20 Fr 22:48] =>  0:57
    CLOCK: [2021-08-19 Do 19:51]--[2021-08-20 Fr 00:16] =>  4:25
    :END:
    It would be nice to be able to search in the Files View.
    ...
    Man, this is more complex than I had imagined. :(
    [2021-08-21 Sa 01:51]
    Specifically, I'd like to re-use the search box for all notebook tabs, but
    then I'd have to know which tab is being filtered. And /in theory/, there
    is this method, gtk.Notebook.GetCurrentPage, but its return values seem to
    be rather ... erratic.
    I tried to hijack the tabs' title Labels, but that didn't work out,
    either. :-|
    What do I do?
    Create one search bar per tab? Seems like I don't have an alternative,
    now, do I?
*** DONE Context menus                                           :meditation:
    CLOSED: [2021-08-20 Fr 21:47]
    :LOGBOOK:
    CLOCK: [2021-08-14 Sa 18:38]--[2021-08-14 Sa 19:42] =>  1:04
    :END:
    [2021-08-20 Fr 21:47]
    I closed this item, because I figured out the general mechanisms I want to
    use for context menus. There is still quite a bit of tedious
    detail-oriented labor to be done; but the big problem of how to approach
    this beast I consider solved. 
    
    Now that I start working on the context menu for the Person view, I
    realize I'd like to present different menus depending on what the user
    clicks on, i.e. a Person or a File. 
    And I already *have* a File menu. Can I somehow factor out the code that
    would be common to both cases?
    Seeing as to how I will add more context menus, this is probably something
    I should figure out now.
    ...
    After thinking about this for a bit, I realized the context menu /is/
    specific to the TreeView.
    For example, let's say we have a Person that is linked as an actor/actress
    to a File. In the Person view, we expand the subtree with the Files, and
    then we do a right-click on the File. Does it make sense to show the same
    menu as in the File view?
    Let's say, we add a Tag to the file from the Person view. Then we want to
    update the corresponding node in the File view. *That* is not at all
    trivial without a custom TreeModel (which apparently is not possible in
    Go). It's doable, but I suspect it is very, very tedious.

    But it /does/ make sense to display a menu with different options,
    e.g. play the File or unlink the Person from the File.
*** DONE Folders
    CLOSED: [2021-08-09 Mo 20:53]
    :LOGBOOK:
    CLOCK: [2021-08-07 Sa 19:23]--[2021-08-07 Sa 19:48] =>  0:25
    :END:
*** Files [4/5]
**** DONE Play Files
     CLOSED: [2021-08-16 Mo 19:10]
     :LOGBOOK:
     CLOCK: [2021-08-16 Mo 18:37]--[2021-08-16 Mo 19:10] =>  0:33
     :END:
     The whole point of having a video collection, of course, is to /watch/
     them. So we are going to that.
     [2021-08-16 Mo 19:10]
     There is some fine-print to deal with, but prima facie it works as
     planned. In particular, I take the command line from an environment
     variable for now, I'd prefer a configuration file or something like
     that.
**** DONE Display file size
     CLOSED: [2021-08-14 Sa 00:17]
     :LOGBOOK:
     CLOCK: [2021-08-13 Fr 23:20]--[2021-08-14 Sa 00:17] =>  0:57
     :END:
     Can't be /that/ hard, now, can it?
**** DONE Tagging
     CLOSED: [2021-08-14 Sa 18:37]
     :LOGBOOK:
     CLOCK: [2021-08-13 Fr 20:46]--[2021-08-13 Fr 21:31] =>  0:45
     CLOCK: [2021-08-12 Do 16:53]--[2021-08-12 Do 17:26] =>  0:33
     CLOCK: [2021-08-12 Do 00:14]--[2021-08-12 Do 01:11] =>  0:57
     CLOCK: [2021-08-11 Mi 22:58]--[2021-08-11 Mi 23:22] =>  0:24
     CLOCK: [2021-08-11 Mi 21:55]--[2021-08-11 Mi 22:26] =>  0:31
     CLOCK: [2021-08-11 Mi 19:38]--[2021-08-11 Mi 20:59] =>  1:21
     CLOCK: [2021-08-11 Mi 18:46]--[2021-08-11 Mi 18:47] =>  0:01
     CLOCK: [2021-08-11 Mi 18:36]--[2021-08-11 Mi 18:37] =>  0:01
     CLOCK: [2021-08-11 Mi 17:34]--[2021-08-11 Mi 18:12] =>  0:38
     :END:
**** DONE Person
     CLOSED: [2021-08-19 Do 19:51]
     :LOGBOOK:
     CLOCK: [2021-08-19 Do 19:25]--[2021-08-19 Do 19:51] =>  0:26
     CLOCK: [2021-08-13 Fr 18:25]--[2021-08-13 Fr 20:33] =>  2:08
     CLOCK: [2021-08-13 Fr 16:37]--[2021-08-13 Fr 18:12] =>  1:35
     CLOCK: [2021-08-13 Fr 10:16]--[2021-08-13 Fr 13:05] =>  2:49
     CLOCK: [2021-08-12 Do 23:26]--[2021-08-12 Do 23:32] =>  0:06
     CLOCK: [2021-08-12 Do 20:34]--[2021-08-12 Do 21:14] =>  0:40
     CLOCK: [2021-08-12 Do 19:10]--[2021-08-12 Do 19:16] =>  0:06
     :END:
**** TODO Editing Metadata
     :LOGBOOK:
     CLOCK: [2021-08-18 Mi 20:32]--[2021-08-18 Mi 21:37] =>  1:05
     CLOCK: [2021-08-18 Mi 18:30]--[2021-08-18 Mi 20:01] =>  1:31
     CLOCK: [2021-08-16 Mo 21:30]--[2021-08-16 Mo 23:30] =>  2:00
     CLOCK: [2021-08-16 Mo 19:56]--[2021-08-16 Mo 20:14] =>  0:18
     :END:
     The API reference itself does not let you know, but I found some example
     code that looks promising:
     #+BEGIN_SRC go
     renderer, err := gtk.CellRendererTextNew()
	if err != nil {
		log.Fatal(err)
	}
	renderer.Set("editable", true)
	renderer.Set("editable-set", true)
	renderer.Connect("edited", func(_ *glib.Object, path, text string) {
		iter, err := store.GetIterFromString(path)
		if err == nil {
			store.Set(iter, []int{0}, []interface{}{text})
		}
	})
     #+END
*** DONE Dialog
    CLOSED: [2021-08-09 Mo 20:53]
    :LOGBOOK:
    CLOCK: [2021-08-09 Mo 20:25]--[2021-08-09 Mo 20:52] =>  0:27
    :END:
    This is all so very tedious.
*** DONE Menu
    CLOSED: [2021-08-11 Mi 17:33]
    :LOGBOOK:
    CLOCK: [2021-08-09 Mo 17:20]--[2021-08-09 Mo 19:53] =>  2:33
    CLOCK: [2021-08-09 Mo 17:12]--[2021-08-09 Mo 17:18] =>  0:06
    CLOCK: [2021-08-06 Fr 20:30]--[2021-08-06 Fr 23:48] =>  3:18
    :END:
    As I _slowly_ recover my memories of Gtk2's way of doing menus, and try to
    tranfer those recovered, hazy memories to Gtk3, I begin to realize that
    setting up the menu bar is quite likely every bit as tedious as setting up
    the TreeView instances, so maybe I should handle them in a similar manner.
**** Random Ramblings                                            :meditation:
     I want a menu. That shouldn't be too hard, but I feel that GUI programming
     in Go is rather tedious.
     Maybe it is a quality of GUI programming with statically typed languages
     in general? Or OOP vs Non-OOP? Gtk2 in Ruby and to a slightly lesser
     degree in Python2 felt very natural, whereas, say Swing in Java, as well
     as this, feels a little forced.
     Maybe I am just being whiney.
     I mean, I could just use Ruby, my old video store application still works
     on Debian, but with Ruby - and scripting languages in general - I have
     learned that moving your application from one OS/distro/version to another
     becomes extremely tedious at best, because of the dependencies. I am
     beginning to understand that that is the problem that drove people to
     containers, and maybe that means I should learn about them.
     Anyway, the promise of Go, of course, is that by linking statically, your
     output is one binary, a *really* large binary, but that really large
     binary includes /everything/, from the Go runtime to all your dependencies
     and /their/ dependencies and so forth.
     So once you got a binary, you can just drop that on any compatible system,
     and it should "just work".
     And Go's model lends itself to more easily reproducible build
     environments.
     ...
     The point is, is all this tedium the inevitable price of improved
     portability across effectively Linux distros and BSDs?
     ....
     Another thing is that I feel a mismatch between Go's type system and
     Gtk's. Gtk in C is already pretty weird. I have never used it from C++,
     because I am not a C++ lover (although I did a little GUI programming
     with C++ and Qt4, and that was quite nice), but like I said, with Python
     and Ruby, both object-oriented languages, Gtk's type hierarchy naturally
     translated into class hierarchies and allowed for interesting things,
     especially subclassing existing widget classes.
     In Go, this doesn't work, because there is no inheritance.
*** DONE Initialization
    CLOSED: [2021-08-06 Fr 20:22]
    :LOGBOOK:
    CLOCK: [2021-08-06 Fr 18:36]--[2021-08-06 Fr 20:21] =>  1:45
    :END:
    The initialization of the various TreeViews and their associated
    TreeStores/ListStores is /really/ tedious, and if I want to ever change or
    extend this (which I almost certainly will), I need to find a way to make
    the whole process more ... data-driven, less reptetitive.
** Bugs                                                                 :bug:
*** TODO [#A] UI freezes
    :LOGBOOK:
    CLOCK: [2021-08-26 Do 19:10]--[2021-08-26 Do 22:17] =>  3:07
    CLOCK: [2021-08-23 Mo 22:32]--[2021-08-23 Mo 23:01] =>  0:29
    CLOCK: [2021-08-23 Mo 20:09]--[2021-08-23 Mo 21:14] =>  1:05
    CLOCK: [2021-08-21 Sa 20:29]--[2021-08-21 Sa 23:17] =>  2:48
    :END:
    Occasionally, the UI will freeze. The GLib timer that updates the beacon
    stops getting called as well, so I am fairly certain the problem is in the
    UI layer.
    I am not sure if this is a problem with Gtk3, the Go bindings or with my
    own code.
    I should instrument all of my callbacks with tracing code so I can see if
    maybe some callback gets stuck or deadlocked or something.
    At the moment I have no idea if it's my fault or some library's.
    [2021-08-21 Sa 20:29]
    This is getting really annoying, so I am going to do something about it
    /now/.
